-- ========================================
-- EasyPick Database Schema - Complete Setup Script
-- Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà ÏÑ§Ïπò Ïä§ÌÅ¨Î¶ΩÌä∏
-- ========================================

-- ÏÑ§Ïπò ÏãúÏûë Î©îÏãúÏßÄ
\echo ''
\echo 'üöÄ EasyPick AI Tools Platform Database Setup'
\echo '=============================================='
\echo 'Starting comprehensive database schema installation...'
\echo ''

-- ========================================
-- PHASE 1: EXTENSIONS & CONFIGURATION
-- ========================================

\echo 'üì¶ Phase 1: Installing extensions and configuration...'
\i ddl/00_extensions_and_config.sql
\echo '‚úÖ Extensions and configuration complete'
\echo ''

-- ========================================  
-- PHASE 2: EXISTING SCHEMA FILES
-- ========================================

\echo 'üèóÔ∏è  Phase 2: Creating existing schema tables...'

-- Check if existing schema files exist and load them
\echo '- Loading subscription plans...'
\i ddl/plan_tables.sql

\echo '- Loading prompt templates...'
\i ddl/prompt_templates.sql

\echo '- Loading prompt template forks...'
\i ddl/prompt_template_forks.sql

\echo '- Loading workflow runs...'
\i ddl/runs.sql

\echo '- Loading run steps...'
\i ddl/run_steps.sql

\echo '- Loading search index...'
\i ddl/search_index.sql

\echo '- Loading usage events...'
\i ddl/usage_events.sql

\echo '‚úÖ Core schema tables created'
\echo ''

-- ========================================
-- PHASE 3: VIEWS AND AGGREGATIONS
-- ========================================

\echo 'üìä Phase 3: Creating analysis views and aggregations...'
\i views/usage_monthly_aggregates.sql
\echo '‚úÖ Views and aggregations created'
\echo ''

-- ========================================
-- PHASE 4: RPC FUNCTIONS
-- ========================================

\echo 'üîç Phase 4: Installing search and RPC functions...'

-- Load existing RPC functions
\echo '- Loading search FTS functions...'
\i rpc/search_fts.sql

\echo '- Loading embedding rerank functions...'
\i rpc/rerank_by_embedding.sql

-- Load new RPC functions
\echo '- Loading advanced search functions...'
\i rpc/search_with_embedding.sql

\echo '‚úÖ RPC functions installed'
\echo ''

-- ========================================
-- PHASE 5: SECURITY POLICIES
-- ========================================

\echo 'üîê Phase 5: Applying Row Level Security policies...'
\i rls-security-policies.sql
\echo '‚úÖ Security policies applied'
\echo ''

-- ========================================
-- PHASE 6: DATA POPULATION (CONDITIONAL)
-- ========================================

\echo 'üìù Phase 6: Populating search index...'

-- Load search index population if it exists
DO $$
BEGIN
    -- Check if we should populate search index
    \i migrations/populate_search_index.sql
EXCEPTION
    WHEN others THEN
        RAISE NOTICE 'Search index population skipped (file not found or error)';
END
$$;

\echo '‚úÖ Search index populated'
\echo ''

-- ========================================
-- PHASE 7: VERIFICATION & HEALTH CHECK
-- ========================================

\echo 'üîç Phase 7: Running verification checks...'

-- Verify extensions are installed
DO $$
BEGIN
    -- Check pgvector
    IF EXISTS (SELECT 1 FROM pg_extension WHERE extname = 'vector') THEN
        RAISE NOTICE '‚úÖ pgvector extension installed';
    ELSE
        RAISE WARNING '‚ùå pgvector extension not found';
    END IF;
    
    -- Check Korean text search
    IF EXISTS (SELECT 1 FROM pg_ts_config WHERE cfgname = 'korean') THEN
        RAISE NOTICE '‚úÖ Korean text search configuration available';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  Korean text search using simple configuration';
    END IF;
    
    -- Check RLS status
    RAISE NOTICE '‚úÖ Row Level Security enabled on % tables', 
        (SELECT count(*) FROM pg_class c 
         JOIN pg_namespace n ON c.relnamespace = n.oid 
         WHERE n.nspname = 'public' 
           AND c.relkind = 'r' 
           AND c.relrowsecurity = true);
END
$$;

-- Display table counts
\echo ''
\echo 'üìã Database Summary:'
\echo '===================='

SELECT 
    'Total Tables' as metric,
    count(*)::text as value
FROM information_schema.tables 
WHERE table_schema = 'public'
    AND table_type = 'BASE TABLE'

UNION ALL

SELECT 
    'Total Views' as metric,
    count(*)::text as value  
FROM information_schema.views
WHERE table_schema = 'public'

UNION ALL

SELECT 
    'Total Functions' as metric,
    count(*)::text as value
FROM information_schema.routines
WHERE routine_schema = 'public'
    AND routine_type = 'FUNCTION'

UNION ALL

SELECT 
    'RLS Enabled Tables' as metric,
    count(*)::text as value
FROM pg_class c 
JOIN pg_namespace n ON c.relnamespace = n.oid 
WHERE n.nspname = 'public' 
    AND c.relkind = 'r' 
    AND c.relrowsecurity = true;

-- ========================================
-- SAMPLE DATA OPTION
-- ========================================

\echo ''
\echo 'üé≤ Optional: Sample Data Installation'
\echo '====================================='
\echo 'To install sample data for development/testing:'
\echo '\i sample-data.sql'
\echo ''

-- ========================================
-- COMPLETION MESSAGE
-- ========================================

\echo 'üéâ EasyPick Database Setup Complete!'
\echo '====================================='
\echo ''
\echo 'Your database is now ready with:'
\echo '‚Ä¢ ‚úÖ pgvector AI search system'
\echo '‚Ä¢ ‚úÖ Comprehensive RLS security'  
\echo '‚Ä¢ ‚úÖ Usage tracking & analytics'
\echo '‚Ä¢ ‚úÖ Prompt template management'
\echo '‚Ä¢ ‚úÖ Workflow execution system'
\echo '‚Ä¢ ‚úÖ Advanced search functions'
\echo ''
\echo 'üìö Next Steps:'
\echo '1. Update your environment variables'
\echo '2. Generate TypeScript types: supabase gen types typescript'
\echo '3. Install sample data (development only): \i sample-data.sql'
\echo '4. Review the SETUP_README.md for detailed usage'
\echo ''
\echo 'üö® Security Reminders:'
\echo '‚Ä¢ All tables have RLS enabled by default'
\echo '‚Ä¢ Service role has administrative access'
\echo '‚Ä¢ Review and customize security policies as needed'
\echo '‚Ä¢ Set up proper backup and monitoring'
\echo ''

-- Final health check
SELECT 
    'Setup Status' as status,
    'SUCCESS' as result,
    NOW() as completed_at;

\echo '‚ú® Happy coding with EasyPick AI Tools Platform! ‚ú®'
\echo ''